#Authors: Henry Fisher
#Description: This function solves the Acemoglu model for any inputed adjacency matrix
#Notes: From the previous version we added an if else statement to assume where y_ij = 0, r_ij = 0

import networkx as nx
import numpy as np
import random as rd
from scipy.optimize import fsolve

def generate_scale_free_graph(n, alpha, beta, gamma, delta_in, delta_out):
    G = nx.scale_free_graph(n=n, alpha=alpha, beta=beta, gamma=gamma, delta_in=delta_in, delta_out=delta_out)
    adj_matrix = nx.to_numpy_array(G)

    # Ensure adjacency matrix has no rows with all zeros
    while np.any(adj_matrix.sum(axis=1) == 0):
        rows_with_zero = np.where(adj_matrix.sum(axis=1) == 0)[0]
        for row in rows_with_zero:
            non_zero_nodes = np.nonzero(adj_matrix.sum(axis=0))[0]
            selected_node = rd.choice(non_zero_nodes)
            adj_matrix[selected_node, row] = 1
            adj_matrix[row, selected_node] = 1

    # Multiply non-zero elements by 100
    adj_matrix = np.where(adj_matrix != 0, adj_matrix * 100, adj_matrix)

    # Invert the matrix to reverse link directions
    adj_matrix = adj_matrix.T

    return adj_matrix, G

yij, G = generate_scale_free_graph(n=30, alpha=0.41, beta=0.54, gamma=0.05, delta_in=0, delta_out=0)

# Define constraints
c = 20  # cash on hand
zj = 7  # short term investment return
#A = 10  # long term project result
v = 8  # senior obligations


# Function to generate and solve the system of equations
def solve_rij(yij):
    def Bankfunc(z):
        F = np.empty(yij.size) #creates an empty array (or maybe list? data structure) the same size as
        for j in range(len(yij)): #each j is a column in the adjacency matrix #we switched the i and j for loops so we can calculate yj n times instead of n*n times
          yj = np.sum(yij[:, j]) #this calculates the total debt (yj) for each bank j
          for i in range(len(yij)): #each i is a row in the adjacency matrix
            if yij[i, j] == 0:
              F[i*len(yij)+j] = z[i*len(yij)+j] #if yij = 0 then we assume rij = 0
            else:
              yi = np.sum(yij[i, :]) #this calculates the total antidebt for each bank
              F[i*len(yij)+j] = yij[i, j] / yj * max(min(yj, np.sum(z[j*len(yij):j*len(yij)+(len(yij))]) + c + zj + (np.abs(yj - yi) * np.random.normal(1.07, 0.2)) - v), 0) - z[i*len(yij)+j] #the actual math of the model
        return F

    # Initial guess for z
    z_guess = np.full(yij.size, 100)

    # Solve for rij using fsolve
    z_solution = fsolve(Bankfunc, z_guess)

    # Reshape the solution back to the original shape of yij
    rij_solution = z_solution.reshape(yij.shape)

    return rij_solution

# Solve for rij
rij = solve_rij(yij)

# Print the solution
print(rij)
