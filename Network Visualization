import networkx as nx
import numpy as np
import matplotlib.pyplot as plt

n = 5000
m = 8
p = 0.4

# Generate the first graph
G_one = nx.powerlaw_cluster_graph(n, m, p)
yij_one = nx.to_numpy_array(G_one)

# Generate the second graph
G_two = nx.powerlaw_cluster_graph(n, m, p)
yij_two = nx.to_numpy_array(G_two)

G = nx.DiGraph()
G.add_nodes_from(range(n))

for i in range(n):
  for j in range(n):
    if i > j:
      if yij_one[i][j] != 0:
            G.add_edge(i, j)
    elif i < j:
      if yij_two[i][j] != 0:
            G.add_edge(i, j)

num_links = G.number_of_edges()
print("Number of links:", num_links)

avg_path_length = nx.average_shortest_path_length(G)
print("Average path length:", avg_path_length)

diameter = nx.diameter(G)
print("Diameter:", diameter)

avg_clustering = nx.average_clustering(G)
print("Average clustering:", avg_clustering)

eccentricities = nx.eccentricity(G)
avg_eccentricity = sum(eccentricities.values()) / len(eccentricities)
print("Average eccentricity:", avg_eccentricity)


# Calculate the out-degree sequence
out_degree_sequence = sorted((d for n, d in G.out_degree()), reverse=True)
dmax = max(out_degree_sequence)

fig, axs = plt.subplots(1, 2, figsize=(12, 6))

# Print the connections between nodes
#for edge in G.edges():
       #print(f"Node {edge[0]} is connected to node {edge[1]}")

# Plot the entire graph
#axs[0].set_title("Scale-Free Directed Network G")
pos = nx.spring_layout(G)
nx.draw_networkx_nodes(G, pos, ax=axs[0], node_size=20)
nx.draw_networkx_edges(G, pos, ax=axs[0], alpha=0.4)

# Plot the out-degree distribution
axs[1].set_title("Out-Degree Distribution Plot")
axs[1].plot(out_degree_sequence, "b-", marker="o")
axs[1].set_ylabel("Out-Degree")
axs[1].set_xlabel("Node Count")

plt.tight_layout()
plt.show()
